#     cb_test_env_bat2sh.sed - A sed script for converting the build_env_setup.bat
#                           and similar scripts generated by conda-build to an
#                           equivalent bash suitable for running in a conda-forge
#                           m2-bash environment 
#     Copyright (C) 2025  Onnie Lynn Winebarger 
#
#     This program is free software: you can redistribute it and/or modify
#     it under the terms of the GNU Affero General Public License as published
#     by the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU Affero General Public License for more details.
#
#     You should have received a copy of the GNU Affero General Public License
#     along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
1 {
    i set -x
    i export CONDA_AUTO_ACTIVATE_BASE=false
}
: start
/^.*&&.*/ {
    t clear_flag1; :clear_flag1
    s/&&/\n/g
    t test_env
    # something is wrong
    i Unexpected processing state
    Q1    
}
#Only handle cases produced by conda build for test environment
# IF %ERRORLEVEL% NEQ 0 exit /B 1
/^\s*IF\s+%ERRORLEVEL%\s+NEQ\s+0\s+exit\s+\/B\s+1\s*$/ {
    z
    s/^$/[ "$?" = "0" ] || exit 1/p
    d
}
/^\s*conda\s+activate\s+/ {
    t clear_flag1; :clear_flag1
    s|^\s*conda\s+activate\s+"?([^"]+)"?\s*$|conda activate '\1'\nexport PREFIX="$(/usr/bin/cygpath '\1')"|p
    t continue_activate
    # something is wrong
    i Unexpected processing state
    Q1
    : continue_activate
    # prevent any duplicate copies of MSYS-2.0.dll from PATH taking precedence
    i PATH="$(echo "$PATH" | sed -E 's|:([^:]+/Library/usr/bin):|:|g')"
    d
}
/^\s*\S/ {
    # an unrecognized non-blank line
    # something is wrong
    i Unexpected processing state
    Q1
}
d
# only 
:test_env
t clear_flag_test_env; :clear_flag_test_env
# process multiple commands from one input line
# set up hold buffer invariant
# must never see two blank lines in a row from the input
s/\n\n+([^\n])/\n\1/g
s/\n\n$/\n/
# must have a newline at the beginning and end of the hold space
s/^([^\n])/\n\1/
s/([^\n])$/\1\n/
h
: loop
# Hold space will be of the form \n(<unprocessed line>\n)*(\n<data used in line processing>)?
# where each <unprocessed line> contains no newlines
x
# first discard any auxiliary data from prior line
s/\n\n.*$/\n/
h
s/^\n(.*)\n$/\1/
# Now hold space begins and ends in newline, pattern space does not
# If remaining lines contains no words, we
# are done with this line of input
/^\s*$/ {
    d
}
# Otherwise, remove first line from hold space, and following lines (if any) from pattern space
x
s/^\n[^\n]+\n/\n/
x
s/^([^\n]+)\n.*$/\1/
# Now handle command on current line
/^\s*set\s+/ {
    t clear_flag3; :clear_flag3
    s/^\s*set\s+"([^=]+)=(.*)"\s*$/\1=\2/
    t process_set_vars
    s/^\s*set\s+([^=]+)=(.*)$/\1=\2/
    t process_set_vars
    # something is wrong
    i Unexpected processing state
    Q1
    : process_set_vars
    # set auxiliary data to <var>=<value>
    H
    # convert the variable name
    s/^([^=]+)=.*$/\1/
    # handle special cases - CMD variables can contain parentheses
    /[(|)]/ {
	s/[(|)]/_/g
    }
    /^PATH$/ {
	s/^PATH$/BATCH_PATH/
    }
    H
    x
    h
    /^(.*)\n\n[^\n=]+=[^\n]*\n([^\n]+)$/! {
	# something is wrong
	i Unexpected processing state
	Q1	
    }
    # set auxiliary data to the processed variable name and process the value expression
    s/^(.*)\n\n[^\n=]+=[^\n]*\n([^\n]+)$/\1\n\n\2/
    x
    s/^.*\n\n[^\n=]+=([^\n]*)\n[^\n]+$/\1/
    # escape characters special to shell
    s/(\$|"|\\|`)/\\\1/g
    # convert CMD variable interpolation to shell variable interpolation
    s/%([^%]+)%/${\1}/g
    # convert values that look like paths to paths
    s|^[A-Z]:\\.*$|$(/usr/bin/cygpath -p "\0")|
    # quote the value expression
    s/^.*$/"\0"/
    # finish the line and print it
    H
    g
    # discard the unprocessed lines
    s/^.*\n\n//
    # join the variable name and value with an "=" and export the variable
    s/\n/=/
    # Special case - conda activate implementation for posix shell fails empty string
    s/^CONDA_SHLVL=""$/CONDA_SHLVL=0/
    s/^.*$/export \0/
    p
    # start of loop discards the auxiliary data
    b loop
}
/^\s*@?(call|CALL)\s+(\S.*)\s*$/ {
  s/^\s*@?(call|CALL)\s+(\S.*)\s*$/\2/
  /^"?(.*)conda_hook\.bat"?(\s.*)?$/ {
    s|^"?(.*)conda_hook\.bat"?(\s+(\S.*)?)?$|ask_conda="$(eval "$(realpath "$(cygpath '\1')"/../Scripts/conda.exe)" shell.posix hook\2)"\neval "$ask_conda"|p
    # prevent any duplicate copies of MSYS-2.0.dll from PATH taking precedence
	i PATH="$(echo "$PATH" | sed -E 's|:([^:]+/Library/usr/bin):|:|g')"
    b loop
  }
  # something is wrong
  i Unexpected processing state
  Q1	
}
# something is wrong
i Unexpected processing state
Q1	

